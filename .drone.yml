kind: pipeline
type: docker
name: Build & Deploy
trigger:
  event:
    - push
steps:
  # Shaders workaround - prepare (only for main)
  - name: shaders-workaround-prepare
    image: alpine
    when:
      branch:
        - main
    commands:
      - apk add --no-cache zip
      - |
        if [ -d "assets/minecraft/shaders" ]; then
          zip -r shaders.zip assets/minecraft/shaders
          rm -r assets/minecraft/shaders
        fi

  # Build with PackSquash (only for main)
  - name: build-with-packsquash
    image: alpine
    when:
      branch:
        - main
    commands:
      - ./bin/packsquash packsquash_options.toml

  # Shaders workaround - finalize (only for main)
  - name: shaders-workaround-finalize
    image: alpine
    when:
      branch:
        - main
    commands:
      - apk add --no-cache unzip zip
      - |
        if [ -f "shaders.zip" ]; then
          unzip shaders.zip -d .
          rm shaders.zip
          zip -ur gamula.zip assets/minecraft/shaders
        fi

  # Build pack (for all branches, ensures the same ZIP naming)
  - name: build-pack
    image: alpine
    commands:
      - apk add --no-cache zip
      - ZIP_FILE="gamula-${DRONE_BUILD_NUMBER}.zip"
      - echo "Creating $ZIP_FILE"
      - |
        if [ "$DRONE_BRANCH" == "main" ]; then
          mv gamula.zip "$ZIP_FILE"
        else
          zip -r "$ZIP_FILE" .
        fi

  # Hash the output file
  - name: hash-output
    image: alpine
    commands:
      - apk add --no-cache bash coreutils
      - ZIP_FILE="gamula-${DRONE_BUILD_NUMBER}.zip"
      - HASH=$(sha256sum "$ZIP_FILE" | cut -d " " -f 1)
      - echo "pack_hash=$HASH"
  #
  # # Deploy Resource Pack using sshpass + sftp (for all branches)j
  # - name: deploy-resource-pack
  #   image: alpine
  #   environment:
  #     SFTP_HOST:
  #       from_secret: SFTP_HOST
  #     SFTP_USERNAME:
  #       from_secret: SFTP_USERNAME
  #     SFTP_PASSWORD:
  #       from_secret: SFTP_PASSWORD
  #   commands:
  #     - apk add --no-cache openssh sshpass
  #     - ZIP_FILE="gamula-${DRONE_BUILD_NUMBER}.zip"
  #     - echo "Uploading $ZIP_FILE to $SFTP_HOST via SFTP"
  #     - |
  #       sshpass -p "$SFTP_PASSWORD" sftp -oBatchMode=no -o StrictHostKeyChecking=no -b - $SFTP_USERNAME@$SFTP_HOST <<EOF
  #       put $ZIP_FILE
  #       bye
  #       EOF
  #

  - name: discord-notification
    image: alpine
    environment:
      DISCORD_WEBHOOK_URL:
        from_secret: discord_webhook_url
    commands:
      - apk add --no-cache curl jq
      - |
        # Check if .drone.env exists, then load it and pretty-print its contents
        if [ -f ".drone.env" ]; then
          ENV_CONTENT=$(cat .drone.env | jq -R -s -c 'split("\n") | map(select(length > 0))')
          ENV_PRETTY=$(echo "$ENV_CONTENT" | jq -r '. | map("- " + .) | join("\\n")')
        else
          ENV_PRETTY=""
        fi

        # Determine the color based on the build status
        if [ "$DRONE_BUILD_STATUS" = "success" ]; then
          COLOR=65280 # Green
          STATUS_MESSAGE="Success ✅"
        else
          COLOR=16711680 # Red
          STATUS_MESSAGE="Failure ❌"
        fi

        # Get GitHub user avatar URL and commit author info (optional fallback)
        GITHUB_USER_AVATAR="https://avatars.githubusercontent.com/${DRONE_COMMIT_AUTHOR}" # GitHub avatar URL
        GITHUB_USER_NAME="${DRONE_COMMIT_AUTHOR}"

        echo "user: $GITHUB_USER_NAME"

        # Build the default description message
        DESCRIPTION="${GITHUB_USER_NAME} pushed to ${DRONE_BRANCH}.\\n[View Build #$DRONE_BUILD_NUMBER](${DRONE_BUILD_LINK})\\nStatus: $STATUS_MESSAGE"

        # Append the environment variables if they exist
        if [ -n "$ENV_PRETTY" ]; then
          DESCRIPTION="${DESCRIPTION}\\n\\n**Environment Variables:**\\n$ENV_PRETTY"
        fi

        # Build the JSON payload with GitHub user icon and username
        PAYLOAD="{\"username\": \"${GITHUB_USER_NAME}\", \"avatar_url\": \"$GITHUB_USER_AVATAR\", \"embeds\": [{\"title\": \"$DRONE_BRANCH\", \"description\": \"$DESCRIPTION\", \"color\": $COLOR}]}"

        # Echo the full payload for debugging
        echo "Payload: $PAYLOAD"

        # Send the payload to Discord
        curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$DISCORD_WEBHOOK_URL"

